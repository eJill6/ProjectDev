//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.PublicApiService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PublicApiService.IPublicApiService")]
    public interface IPublicApiService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/GetRemoteCacheForOldService", ReplyAction="http://tempuri.org/IPublicApiService/GetRemoteCacheForOldServiceResponse")]
        string GetRemoteCacheForOldService(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/GetRemoteCacheForOldService", ReplyAction="http://tempuri.org/IPublicApiService/GetRemoteCacheForOldServiceResponse")]
        System.Threading.Tasks.Task<string> GetRemoteCacheForOldServiceAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/RemoveRemoteCacheForOldService", ReplyAction="http://tempuri.org/IPublicApiService/RemoveRemoteCacheForOldServiceResponse")]
        void RemoveRemoteCacheForOldService(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/RemoveRemoteCacheForOldService", ReplyAction="http://tempuri.org/IPublicApiService/RemoveRemoteCacheForOldServiceResponse")]
        System.Threading.Tasks.Task RemoveRemoteCacheForOldServiceAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/SetRemoteCacheForOldService", ReplyAction="http://tempuri.org/IPublicApiService/SetRemoteCacheForOldServiceResponse")]
        void SetRemoteCacheForOldService(SLPolyGame.Web.Model.SetRemoteCacheParam setRemoteCacheParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/SetRemoteCacheForOldService", ReplyAction="http://tempuri.org/IPublicApiService/SetRemoteCacheForOldServiceResponse")]
        System.Threading.Tasks.Task SetRemoteCacheForOldServiceAsync(SLPolyGame.Web.Model.SetRemoteCacheParam setRemoteCacheParam);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/IsAllowExecutingActionWithLock", ReplyAction="http://tempuri.org/IPublicApiService/IsAllowExecutingActionWithLockResponse")]
        bool IsAllowExecutingActionWithLock(string key, double cacheSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/IsAllowExecutingActionWithLock", ReplyAction="http://tempuri.org/IPublicApiService/IsAllowExecutingActionWithLockResponse")]
        System.Threading.Tasks.Task<bool> IsAllowExecutingActionWithLockAsync(string key, double cacheSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/IsAllowExecutingAction", ReplyAction="http://tempuri.org/IPublicApiService/IsAllowExecutingActionResponse")]
        bool IsAllowExecutingAction(string key, double cacheSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublicApiService/IsAllowExecutingAction", ReplyAction="http://tempuri.org/IPublicApiService/IsAllowExecutingActionResponse")]
        System.Threading.Tasks.Task<bool> IsAllowExecutingActionAsync(string key, double cacheSeconds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPublicApiServiceChannel : Web.PublicApiService.IPublicApiService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PublicApiServiceClient : System.ServiceModel.ClientBase<Web.PublicApiService.IPublicApiService>, Web.PublicApiService.IPublicApiService {
        
        public PublicApiServiceClient() {
        }
        
        public PublicApiServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PublicApiServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublicApiServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PublicApiServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetRemoteCacheForOldService(string key) {
            return base.Channel.GetRemoteCacheForOldService(key);
        }
        
        public System.Threading.Tasks.Task<string> GetRemoteCacheForOldServiceAsync(string key) {
            return base.Channel.GetRemoteCacheForOldServiceAsync(key);
        }
        
        public void RemoveRemoteCacheForOldService(string key) {
            base.Channel.RemoveRemoteCacheForOldService(key);
        }
        
        public System.Threading.Tasks.Task RemoveRemoteCacheForOldServiceAsync(string key) {
            return base.Channel.RemoveRemoteCacheForOldServiceAsync(key);
        }
        
        public void SetRemoteCacheForOldService(SLPolyGame.Web.Model.SetRemoteCacheParam setRemoteCacheParam) {
            base.Channel.SetRemoteCacheForOldService(setRemoteCacheParam);
        }
        
        public System.Threading.Tasks.Task SetRemoteCacheForOldServiceAsync(SLPolyGame.Web.Model.SetRemoteCacheParam setRemoteCacheParam) {
            return base.Channel.SetRemoteCacheForOldServiceAsync(setRemoteCacheParam);
        }
        
        public bool IsAllowExecutingActionWithLock(string key, double cacheSeconds) {
            return base.Channel.IsAllowExecutingActionWithLock(key, cacheSeconds);
        }
        
        public System.Threading.Tasks.Task<bool> IsAllowExecutingActionWithLockAsync(string key, double cacheSeconds) {
            return base.Channel.IsAllowExecutingActionWithLockAsync(key, cacheSeconds);
        }
        
        public bool IsAllowExecutingAction(string key, double cacheSeconds) {
            return base.Channel.IsAllowExecutingAction(key, cacheSeconds);
        }
        
        public System.Threading.Tasks.Task<bool> IsAllowExecutingActionAsync(string key, double cacheSeconds) {
            return base.Channel.IsAllowExecutingActionAsync(key, cacheSeconds);
        }
    }
}
